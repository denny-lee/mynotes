2016-11-28
antd + react
层级之间传递数据的方式：
1，用props（上向下），callback（下向上）
2，使用EventPool
3，使用Redux，功能比较复杂


React是一个庞大的前端框架，局部刷新DOM，大数据加载很强大。由Facebook开发

npm一个javaScript package Manager.

node.js 一个javaScript运行时

ECMAScript = javaScript
ECMAScript2015 = ES6

ant design 蚂蚁金服开发

dva

webpack

babel

eslint

dora

atool-build

Redux

() => {}这种定义函数的方式与function() {}的方式的一个重要区别是前者不绑定function的this.
通过React.createClass({json});的方式创建class时，{add() {}}也同样不会绑定function的this.

arr.map(key, index) {}
arr.slice()
Object.assign();
...{}
keys.filter(key => key !== k)


2017-1-3
React 只是一个UI
虚拟DOM
单向数据流

react 中取dom元素，ref,
<a ref="test" />
this.refs.test.getDomNode();
React.findDomNode(this.refs.test);


2017/3/20 13:34:39
Redux 基础
Actions are payloads of information that send data from your application to your store. They are the only source of information for the store. You send them to the store using store.dispatch().
import { ADD_TODO, REMOVE_TODO } from '../actionTypes'
const ADD_TODO = 'ADD_TODO'
{
  type: ADD_TODO,
  text: 'Build my first Redux app'
}
小应用可直接用string.
一般action中的Type定义成变量是比较好的做法

Reducers

Actions describe the fact that something happened, but don't specify how the application's state changes in response. This is the job of reducers.

做了什么：(previousState, action) => newState
Things you should never do inside a reducer:

Mutate its arguments;
Perform side effects like API calls and routing transitions;
Call non-pure functions, e.g. Date.now() or Math.random().


Store
The Store is the object that brings them together. The store has the following responsibilities:

import { createStore } from 'redux'
import todoApp from './reducers'
let store = createStore(todoApp)

store.dispatch(addTodo('Learn about actions'))


Data Flow
Redux architecture revolves around a strict unidirectional data flow.
The data lifecycle in any Redux app follows these 4 steps:
You call store.dispatch(action).
		You can call store.dispatch(action) from anywhere in your app, including components and XHR callbacks, or even at scheduled intervals.
The Redux store calls the reducer function you gave it.
The root reducer may combine the output of multiple reducers into a single state tree.
The Redux store saves the complete state tree returned by the root reducer.

